#!/usr/bin/env node

/**
 * Auto-register articles by scanning HTML files and extracting metadata
 * 
 * This script:
 * 1. Scans private_html/articles/ for HTML files
 * 2. Extracts metadata from HTML head tags and comments
 * 3. Auto-generates articles.js with article data
 * 4. Auto-updates vite.config.js with new article paths
 * 
 * Metadata extraction priority:
 * 1. HTML head tags (title, meta description, etc.)
 * 2. HTML comments for article-specific data (category, reading time, etc.)
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { JSDOM } from 'jsdom';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const projectRoot = path.join(__dirname, '..');

/**
 * Extract metadata from HTML file
 */
function extractArticleMetadata(htmlPath, fileName) {
  const htmlContent = fs.readFileSync(htmlPath, 'utf-8');
  const dom = new JSDOM(htmlContent);
  const document = dom.window.document;
  
  // Extract from HTML head tags
  const title = document.querySelector('title')?.textContent?.replace(' | Joseph', '') || '';
  const description = document.querySelector('meta[name="description"]')?.getAttribute('content') || '';
  const keywords = document.querySelector('meta[name="keywords"]')?.getAttribute('content') || '';
  
  // Extract date from time element or meta tags
  const timeElement = document.querySelector('time[datetime]');
  const dateISO = timeElement?.getAttribute('datetime') || '';
  
  // Extract from HTML comments for article-specific data
  const commentMatches = htmlContent.match(/<!--\s*ARTICLE_META:(.*?)-->/s);
  let commentMeta = {};
  
  if (commentMatches) {
    try {
      // Parse YAML-like format in comments
      const commentContent = commentMatches[1].trim();
      const lines = commentContent.split('\n');
      
      lines.forEach(line => {
        const [key, ...valueParts] = line.split(':');
        if (key && valueParts.length > 0) {
          const value = valueParts.join(':').trim();
          commentMeta[key.trim()] = value;
        }
      });
    } catch (e) {
      console.warn(`Failed to parse comment metadata for ${fileName}:`, e.message);
    }
  }
  
  // Generate slug from filename
  const slug = fileName.replace('.html', '');
  
  // Generate ID from slug (simple hash)
  const id = slug.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0) % 1000 + 1;
  
  return {
    id,
    title,
    excerpt: description,
    category: commentMeta.category || 'php', // Default category
    date: dateISO || new Date().toISOString().split('T')[0],
    slug,
    readingTime: commentMeta.readingTime || '5', // Default reading time
    tags: keywords ? keywords.split(',').map(t => t.trim()) : []
  };
}

/**
 * Scan articles directory and extract all metadata
 */
function scanArticles() {
  const articlesDir = path.join(projectRoot, 'private_html', 'articles');
  
  if (!fs.existsSync(articlesDir)) {
    console.error('Articles directory not found:', articlesDir);
    return [];
  }
  
  const files = fs.readdirSync(articlesDir)
    .filter(file => file.endsWith('.html'))
    .sort(); // Ensure consistent ordering
  
  const articles = [];
  
  for (const file of files) {
    const filePath = path.join(articlesDir, file);
    
    try {
      const metadata = extractArticleMetadata(filePath, file);
      articles.push(metadata);
      console.log(`✓ Extracted metadata for: ${file}`);
    } catch (error) {
      console.error(`✗ Failed to extract metadata for ${file}:`, error.message);
    }
  }
  
  return articles;
}

/**
 * Generate articles.js file content
 */
function generateArticlesJS(articles) {
  // Sort articles by date (newest first)
  const sortedArticles = articles.sort((a, b) => new Date(b.date) - new Date(a.date));
  
  const articlesData = sortedArticles.map(article => ({
    id: article.id,
    title: article.title,
    excerpt: article.excerpt,
    category: article.category,
    date: article.date,
    slug: article.slug
  }));
  
  return `// Import CSS for Vite processing
import '../css/articles.css';

// Auto-generated articles data - DO NOT EDIT MANUALLY
// This file is automatically generated by scripts/auto-register-articles.js
// To modify articles, edit the HTML files in private_html/articles/

const articles = ${JSON.stringify(articlesData, null, 2)};

class ArticleManager {
  constructor() {
    this.articles = articles;
    this.filteredArticles = [...this.articles];
    this.currentCategory = 'all';
    this.searchTerm = '';
    this.init();
  }

  init() {
    this.setupEventListeners();
    this.renderArticles();
    this.hideLoadingIndicator();
  }

  setupEventListeners() {
    const searchInput = document.getElementById('articleSearch');
    if (searchInput) {
      searchInput.addEventListener('input', window.appUtils.debounce(e => {
        this.searchTerm = e.target.value.toLowerCase();
        this.filterArticles();
      }, 300));
    }

    document.querySelectorAll('.filter-btn').forEach(btn => {
      btn.addEventListener('click', e => {
        this.handleCategoryFilter(e.target);
      });
    });
  }

  handleCategoryFilter(button) {
    document.querySelectorAll('.filter-btn').forEach(btn => {
      btn.classList.remove('active');
    });
    button.classList.add('active');
    this.currentCategory = button.dataset.category;
    this.filterArticles();
  }

  filterArticles() {
    this.filteredArticles = this.articles.filter(article => {
      const categoryMatch = this.currentCategory === 'all' || article.category === this.currentCategory;
      const searchMatch = this.searchTerm === '' || 
        article.title.toLowerCase().includes(this.searchTerm) ||
        article.excerpt.toLowerCase().includes(this.searchTerm);
      return categoryMatch && searchMatch;
    });
    this.renderArticles();
  }

  renderArticles() {
    const grid = document.getElementById('articlesGrid');
    const noResults = document.getElementById('noResults');
    
    if (!grid) return;
    
    if (this.filteredArticles.length === 0) {
      grid.style.display = 'none';
      if (noResults) noResults.style.display = 'block';
      return;
    }
    
    grid.style.display = 'grid';
    if (noResults) noResults.style.display = 'none';
    
    grid.innerHTML = this.filteredArticles.map(article => this.createArticleCard(article)).join('');
    
    // Animate articles
    requestAnimationFrame(() => {
      grid.querySelectorAll('.article-card').forEach((card, index) => {
        setTimeout(() => {
          card.style.opacity = '1';
          card.style.transform = 'translateY(0)';
        }, index * 50);
      });
    });
  }

  createArticleCard(article) {
    const date = new Date(article.date).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    return \`
      <article class="article-card" style="opacity: 0; transform: translateY(20px);">
        <div class="article-meta">
          <span class="article-category \${article.category}">\${article.category}</span>
          <time>\${date}</time>
        </div>
        <a href="/articles/\${article.slug}.html" class="article-title">\${article.title}</a>
        <p class="article-excerpt">\${article.excerpt}</p>
        <a href="/articles/\${article.slug}.html" class="article-read-more">
          Read more →
        </a>
      </article>
    \`;
  }

  hideLoadingIndicator() {
    const indicator = document.getElementById('loadingIndicator');
    if (indicator) {
      indicator.style.display = 'none';
    }
  }
}

// Initialize when DOM is ready
(function() {
  function init() {
    if (typeof window.appUtils !== 'undefined') {
      new ArticleManager();
    } else {
      setTimeout(init, 50);
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
`;
}

/**
 * Update vite.config.js with new article paths
 */
function updateViteConfig(articles) {
  const configPath = path.join(projectRoot, 'vite.config.js');
  
  if (!fs.existsSync(configPath)) {
    console.error('vite.config.js not found');
    return;
  }
  
  let configContent = fs.readFileSync(configPath, 'utf-8');
  
  // Generate article input entries (both HTML and JS)
  const articleInputs = articles.map(article => {
    return `        'articles/${article.slug}': resolve(__dirname, 'private_html/articles/${article.slug}.html'),`;
  }).join('\n');
  
  const articleJSInputs = articles.map(article => {
    return `        'js/articles/${article.slug}': resolve(__dirname, 'private_html/js/articles/${article.slug}.js'),`;
  }).join('\n');
  
  // Replace the articles section in vite.config.js
  const articleSectionRegex = /\/\/ Article pages\n(.*?)\/\/ JavaScript entry points/s;
  const replacement = `// Article pages
${articleInputs}
        // JavaScript entry points`;
  
  configContent = configContent.replace(articleSectionRegex, replacement);
  
  // Add JavaScript entries for articles
  const jsEntryRegex = /(\/\/ JavaScript entry points\n.*?),(\n\s*},)/s;
  configContent = configContent.replace(jsEntryRegex, `$1,
        // Article JavaScript entry points
${articleJSInputs}$2`);
  
  fs.writeFileSync(configPath, configContent);
  console.log('✓ Updated vite.config.js with article paths');
}

/**
 * Create JavaScript files for each article
 */
function createArticleJSFiles(articles) {
  const articlesJSDir = path.join(projectRoot, 'private_html', 'js', 'articles');
  
  // Create articles JS directory if it doesn't exist
  if (!fs.existsSync(articlesJSDir)) {
    fs.mkdirSync(articlesJSDir, { recursive: true });
  }
  
  articles.forEach(article => {
    const jsContent = `// Import CSS for Vite processing
import '../../css/main.css';
import '../../css/articles.css';
import '../../css/syntax-highlighting.css';

// Article functionality
import '../main.js';
import '../syntax-highlighter.js';`;
    
    const jsPath = path.join(articlesJSDir, `${article.slug}.js`);
    fs.writeFileSync(jsPath, jsContent);
  });
  
  console.log('✓ Created JavaScript files for articles');
}

/**
 * Main execution
 */
async function main() {
  console.log('🔧 Auto-registering articles...\n');
  
  // Scan articles and extract metadata
  const articles = scanArticles();
  
  if (articles.length === 0) {
    console.log('No articles found to register.');
    return;
  }
  
  console.log(`\nFound ${articles.length} articles:`);
  articles.forEach(article => {
    console.log(`  - ${article.title} (${article.category}, ${article.date})`);
  });
  
  // Generate articles.js
  const articlesJSContent = generateArticlesJS(articles);
  const articlesJSPath = path.join(projectRoot, 'private_html', 'js', 'articles.js');
  
  fs.writeFileSync(articlesJSPath, articlesJSContent);
  console.log('\n✓ Generated articles.js');
  
  // Update vite.config.js
  updateViteConfig(articles);
  
  // Create JavaScript files for each article
  createArticleJSFiles(articles);
  
  console.log('\n✅ Article auto-registration completed!');
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    console.error('Error:', error);
    process.exit(1);
  });
}

export { scanArticles, extractArticleMetadata, generateArticlesJS };