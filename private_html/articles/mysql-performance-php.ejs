<%- include('../templates/layouts/article', {
  articleTitle: "MySQL Performance Tuning for Complex PHP Applications",
  articleDescription: "Database optimization strategies specifically tailored for bespoke PHP systems with complex queries",
  articleDate: "2024-12-20",
  articleCategory: "database",
  articleReadingTime: 12,
  articleContent: `
<section class="intro">
<p class="lead">Database optimization strategies specifically tailored for bespoke PHP systems with complex queries.</p>
<p>Database performance is often the biggest bottleneck in complex PHP applications. While application-level optimizations are important, database tuning can deliver 10x performance improvements. This article covers proven strategies I've used to optimize MySQL for high-complexity PHP systems.</p>
<p>From query optimization to server configuration, these techniques are essential for managing high-performance databases with complex business logic.</p>
</section>
<section class="content">
<h2>MySQL Configuration Optimization</h2>
<h3>Memory Configuration</h3>
<p>Proper memory allocation is crucial for MySQL performance:</p>
<pre><code class="language-nginx"># /etc/mysql/mysql.conf.d/mysqld.cnf
[mysqld]
# InnoDB Buffer Pool (most important setting)
innodb_buffer_pool_size = 16G  # 70-80% of available RAM
innodb_buffer_pool_instances = 8
innodb_buffer_pool_chunk_size = 128M
# Query cache (disabled in MySQL 8.0+)
query_cache_type = 0
query_cache_size = 0
# Table cache
table_open_cache = 4000
table_definition_cache = 2000
# Connection settings
max_connections = 200
max_user_connections = 180
thread_cache_size = 16
# Sort and join buffers
sort_buffer_size = 2M
join_buffer_size = 2M
read_buffer_size = 1M
read_rnd_buffer_size = 1M
# Temporary tables
tmp_table_size = 64M
max_heap_table_size = 64M</code></pre>
<h3>InnoDB Optimization</h3>
<pre><code class="language-nginx"># InnoDB specific settings
innodb_flush_log_at_trx_commit = 2  # Better performance, slight durability trade-off
innodb_log_file_size = 1G
innodb_log_buffer_size = 64M
innodb_file_per_table = 1
innodb_flush_method = O_DIRECT
innodb_io_capacity = 1000
innodb_io_capacity_max = 2000
# Deadlock detection
innodb_deadlock_detect = 1
innodb_print_all_deadlocks = 1
# Parallel threads
innodb_read_io_threads = 8
innodb_write_io_threads = 8
innodb_purge_threads = 4</code></pre>
<h2>Query Optimization Strategies</h2>
<h3>Index Design</h3>
<p>Proper indexing is fundamental to query performance:</p>
<pre><code class="language-sql">-- Compound indexes for complex WHERE clauses
CREATE INDEX idx_user_orders ON orders (user_id, status, created_at);
-- Covering indexes to avoid table lookups
CREATE INDEX idx_product_details ON products (category_id, status, price, name);
-- Partial indexes for filtered queries
CREATE INDEX idx_active_users ON users (email) WHERE status = &#39;active&#39;;
-- Functional indexes for computed columns
CREATE INDEX idx_user_full_name ON users ((CONCAT(first_name, &#39; &#39;, last_name)));
-- JSON indexes for JSON column queries
CREATE INDEX idx_user_preferences ON users ((JSON_EXTRACT(preferences, &#39;$.language&#39;)));</code></pre>
<h3>Query Rewriting</h3>
<p>Transform slow queries into efficient ones:</p>
<pre><code class="language-sql">-- Slow: Using OR conditions
SELECT * FROM products
WHERE category_id = 1 OR category_id = 2 OR category_id = 3;
-- Fast: Using IN clause
SELECT * FROM products
WHERE category_id IN (1, 2, 3);
-- Slow: Using NOT IN with NULL values
SELECT * FROM users
WHERE id NOT IN (SELECT user_id FROM banned_users);
-- Fast: Using LEFT JOIN
SELECT u.* FROM users u
LEFT JOIN banned_users b ON u.id = b.user_id
WHERE b.user_id IS NULL;
-- Slow: Using OFFSET for pagination
SELECT * FROM products
ORDER BY created_at DESC
LIMIT 20 OFFSET 10000;
-- Fast: Using cursor-based pagination
SELECT * FROM products
WHERE created_at &lt; &#39;2024-01-01 12:00:00&#39;
ORDER BY created_at DESC
LIMIT 20;</code></pre>
<h2>PHP Database Optimization</h2>
<h3>Connection Optimization</h3>
<pre><code class="language-php">&lt;?php
declare(strict_types=1);
namespace AppDatabaseOptimization;
use AppValueObjects{DatabaseConfig, QueryResult, CacheKey, CacheTTL};
use AppExceptions{DatabaseConnectionException, QueryExecutionException};
use AppContracts{CacheInterface, QueryMetricsInterface};
use PDO;
use PDOException;
use PsrLogLoggerInterface;
final readonly class DatabaseOptimizer
{
private PDO $connection;
public function __construct(
DatabaseConfig $config,
private CacheInterface $cache,
private QueryMetricsInterface $metrics,
private LoggerInterface $logger,
) {
$this-&gt;connection = $this-&gt;createOptimizedConnection($config);
}
private function createOptimizedConnection(DatabaseConfig $config): PDO
{
try {
return new PDO(
$config-&gt;dsn,
$config-&gt;username,
$config-&gt;password,
[
PDO::ATTR_PERSISTENT =&gt; true,
PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION,
PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC,
PDO::ATTR_EMULATE_PREPARES =&gt; false,
PDO::MYSQL_ATTR_INIT_COMMAND =&gt; implode(&#39;;&#39;, [
&#39;SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci&#39;,
&#39;SET SESSION sql_mode=&quot;STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&quot;&#39;,
&#39;SET SESSION time_zone=&quot;+00:00&quot;&#39;,
&#39;SET SESSION group_concat_max_len=1000000&#39;,
&#39;SET SESSION optimizer_switch=&quot;mrr=on,mrr_cost_based=on&quot;&#39;,
])
]
);
} catch (PDOException $e) {
throw new DatabaseConnectionException(
&quot;Failed to connect to database: {$e-&gt;getMessage()}&quot;,
previous: $e
);
}
}
public function executeQuery(string $sql, array $params = []): QueryResult
{
$startTime = hrtime(true);
try {
$stmt = $this-&gt;connection-&gt;prepare($sql);
$stmt-&gt;execute($params);
$data = $stmt-&gt;fetchAll();
$executionTime = hrtime(true) - $startTime;
$this-&gt;metrics-&gt;recordQuery($sql, $params, $executionTime);
return new QueryResult(
data: $data,
executionTime: $executionTime,
rowCount: $stmt-&gt;rowCount()
);
} catch (PDOException $e) {
$this-&gt;logger-&gt;error(&#39;Query execution failed&#39;, [
&#39;sql&#39; =&gt; $sql,
&#39;params&#39; =&gt; $params,
&#39;error&#39; =&gt; $e-&gt;getMessage(),
]);
throw new QueryExecutionException(
&quot;Query execution failed: {$e-&gt;getMessage()}&quot;,
previous: $e
);
}
}
public function executeQueryWithCache(
string $sql,
array $params = [],
?CacheTTL $ttl = null
): QueryResult {
$cacheKey = CacheKey::forQuery($sql, $params);
// Check cache first
$cached = $this-&gt;cache-&gt;get($cacheKey);
if ($cached !== null) {
return $cached;
}
$result = $this-&gt;executeQuery($sql, $params);
$this-&gt;cache-&gt;set($cacheKey, $result, $ttl ?? new CacheTTL(300));
return $result;
}
public function transaction(callable $callback): mixed
{
$this-&gt;connection-&gt;beginTransaction();
try {
$result = $callback($this-&gt;connection);
$this-&gt;connection-&gt;commit();
return $result;
} catch (Throwable $e) {
$this-&gt;connection-&gt;rollBack();
throw $e;
}
}
}</code></pre>
<h3>Prepared Statement Optimization</h3>
<pre><code class="language-php">&lt;?php
declare(strict_types=1);
namespace AppDatabaseStatements;
use AppValueObjects{SqlStatement, BatchResult};
use AppExceptions{StatementExecutionException, BatchExecutionException};
use PDO;
use PDOStatement;
use PDOException;
use PsrLogLoggerInterface;
use WeakMap;
final class PreparedStatementPool
{
/** @var array&lt;string, PDOStatement&gt; */
private array $statements = [];
private readonly WeakMap $statementMetadata;
public function __construct(
private readonly PDO $connection,
private readonly LoggerInterface $logger,
private readonly int $maxStatements = 1000,
) {
$this-&gt;statementMetadata = new WeakMap();
}
public function getStatement(SqlStatement $sql): PDOStatement
{
$key = $sql-&gt;getHash();
if (!isset($this-&gt;statements[$key])) {
if (count($this-&gt;statements) &gt;= $this-&gt;maxStatements) {
$this-&gt;evictOldestStatement();
}
try {
$this-&gt;statements[$key] = $this-&gt;connection-&gt;prepare($sql-&gt;value);
$this-&gt;statementMetadata[$this-&gt;statements[$key]] = [
&#39;created_at&#39; =&gt; time(),
&#39;usage_count&#39; =&gt; 0,
];
} catch (PDOException $e) {
throw new StatementExecutionException(
&quot;Failed to prepare statement: {$e-&gt;getMessage()}&quot;,
previous: $e
);
}
}
$stmt = $this-&gt;statements[$key];
$metadata = $this-&gt;statementMetadata[$stmt];
$metadata[&#39;usage_count&#39;]++;
$this-&gt;statementMetadata[$stmt] = $metadata;
return $stmt;
}
public function executeStatement(SqlStatement $sql, array $params = []): array
{
$stmt = $this-&gt;getStatement($sql);
try {
$stmt-&gt;execute($params);
return $stmt-&gt;fetchAll();
} catch (PDOException $e) {
$this-&gt;logger-&gt;error(&#39;Statement execution failed&#39;, [
&#39;sql&#39; =&gt; $sql-&gt;value,
&#39;params&#39; =&gt; $params,
&#39;error&#39; =&gt; $e-&gt;getMessage(),
]);
throw new StatementExecutionException(
&quot;Statement execution failed: {$e-&gt;getMessage()}&quot;,
previous: $e
);
}
}
public function executeBatch(SqlStatement $sql, array $batchParams): BatchResult
{
$stmt = $this-&gt;getStatement($sql);
$affected = 0;
$errors = [];
$this-&gt;connection-&gt;beginTransaction();
try {
foreach ($batchParams as $index =&gt; $params) {
try {
$stmt-&gt;execute($params);
$affected += $stmt-&gt;rowCount();
} catch (PDOException $e) {
$errors[$index] = $e-&gt;getMessage();
if (count($errors) &gt; 10) { // Fail fast after too many errors
throw new BatchExecutionException(
&quot;Too many errors in batch execution&quot;,
$errors
);
}
}
}
if (!empty($errors)) {
$this-&gt;connection-&gt;rollBack();
throw new BatchExecutionException(
&quot;Batch execution failed with errors&quot;,
$errors
);
}
$this-&gt;connection-&gt;commit();
return new BatchResult(
affectedRows: $affected,
processedCount: count($batchParams),
errors: $errors
);
} catch (Throwable $e) {
$this-&gt;connection-&gt;rollBack();
throw $e;
}
}
private function evictOldestStatement(): void
{
$oldestKey = null;
$oldestTime = PHP_INT_MAX;
foreach ($this-&gt;statements as $key =&gt; $stmt) {
$metadata = $this-&gt;statementMetadata[$stmt];
if ($metadata[&#39;created_at&#39;] &lt; $oldestTime) {
$oldestTime = $metadata[&#39;created_at&#39;];
$oldestKey = $key;
}
}
if ($oldestKey !== null) {
unset($this-&gt;statements[$oldestKey]);
}
}
public function getPoolStats(): array
{
$stats = [
&#39;total_statements&#39; =&gt; count($this-&gt;statements),
&#39;max_statements&#39; =&gt; $this-&gt;maxStatements,
&#39;usage_stats&#39; =&gt; [],
];
foreach ($this-&gt;statements as $key =&gt; $stmt) {
$metadata = $this-&gt;statementMetadata[$stmt];
$stats[&#39;usage_stats&#39;][$key] = $metadata;
}
return $stats;
}
}</code></pre>
<h2>Complex Query Optimization</h2>
<h3>Subquery Optimization</h3>
<pre><code class="language-sql">-- Slow: Correlated subquery
SELECT u.*,
(SELECT COUNT(*) FROM orders o WHERE o.user_id = u.id) as order_count
FROM users u
WHERE u.status = &#39;active&#39;;
-- Fast: LEFT JOIN with GROUP BY
SELECT u.*, COALESCE(o.order_count, 0) as order_count
FROM users u
LEFT JOIN (
SELECT user_id, COUNT(*) as order_count
FROM orders
GROUP BY user_id
) o ON u.id = o.user_id
WHERE u.status = &#39;active&#39;;
-- Slow: IN subquery with large result set
SELECT * FROM products
WHERE id IN (
SELECT product_id FROM order_items
WHERE order_id IN (SELECT id FROM orders WHERE status = &#39;completed&#39;)
);
-- Fast: EXISTS with proper indexing
SELECT p.* FROM products p
WHERE EXISTS (
SELECT 1 FROM order_items oi
JOIN orders o ON oi.order_id = o.id
WHERE oi.product_id = p.id AND o.status = &#39;completed&#39;
);</code></pre>
<h3>Aggregation Optimization</h3>
<pre><code class="language-sql">-- Slow: Multiple aggregations in separate queries
$totalOrders = $pdo-&gt;query(&quot;SELECT COUNT(*) FROM orders&quot;)-&gt;fetchColumn();
$totalRevenue = $pdo-&gt;query(&quot;SELECT SUM(total) FROM orders&quot;)-&gt;fetchColumn();
$avgOrderValue = $pdo-&gt;query(&quot;SELECT AVG(total) FROM orders&quot;)-&gt;fetchColumn();
-- Fast: Single query with multiple aggregations
$sql = &quot;SELECT
COUNT(*) as total_orders,
SUM(total) as total_revenue,
AVG(total) as avg_order_value
FROM orders&quot;;
$stats = $pdo-&gt;query($sql)-&gt;fetch();
-- Optimized aggregation with filtering
SELECT
DATE(created_at) as date,
COUNT(*) as order_count,
SUM(total) as revenue,
AVG(total) as avg_value
FROM orders
WHERE created_at &gt;= DATE_SUB(NOW(), INTERVAL 30 DAY)
GROUP BY DATE(created_at)
ORDER BY date DESC;</code></pre>
<h2>Performance Monitoring</h2>
<h3>Slow Query Log Analysis</h3>
<pre><code class="language-php">&lt;?php
declare(strict_types=1);
namespace AppDatabaseMonitoring;
use PDO;
final class SlowQueryAnalyzer
{
public function __construct(
private readonly PDO $pdo
) {}
public function enableSlowQueryLog(): void
{
$this-&gt;pdo-&gt;exec(&quot;SET GLOBAL slow_query_log = &#39;ON&#39;&quot;);
$this-&gt;pdo-&gt;exec(&quot;SET GLOBAL long_query_time = 1&quot;);
$this-&gt;pdo-&gt;exec(&quot;SET GLOBAL log_queries_not_using_indexes = &#39;ON&#39;&quot;);
}
public function getSlowQueries(): array
{
$sql = &quot;SELECT
sql_text,
exec_count,
total_latency,
avg_latency,
lock_latency,
rows_sent,
rows_examined
FROM sys.statement_analysis
WHERE avg_latency &gt; 1000000  -- 1 second
ORDER BY total_latency DESC
LIMIT 20&quot;;
return $this-&gt;pdo-&gt;query($sql)-&gt;fetchAll();
}
public function getTableScans(): array
{
$sql = &quot;SELECT
object_name,
count_read,
avg_read_latency,
count_write,
avg_write_latency
FROM sys.table_io_waits_summary_by_table
ORDER BY count_read DESC
LIMIT 20&quot;;
return $this-&gt;pdo-&gt;query($sql)-&gt;fetchAll();
}
}</code></pre>
<h3>Real-time Performance Monitoring</h3>
<pre><code class="language-sql">class MySQLMonitor {
private $pdo;
public function __construct(PDO $pdo) {
$this-&gt;pdo = $pdo;
}
public function getPerformanceMetrics(): array {
$sql = "SHOW GLOBAL STATUS WHERE Variable_name IN (
'Connections',
'Threads_running',
'Questions',
'Slow_queries',
'Opens',
'Flush_commands',
'Open_tables',
'Queries_per_second_avg',
'Innodb_buffer_pool_read_requests',
'Innodb_buffer_pool_reads',
'Innodb_buffer_pool_wait_free',
'Innodb_log_waits',
'Innodb_rows_read',
'Innodb_rows_inserted',
'Innodb_rows_updated',
'Innodb_rows_deleted'
)";
$result = $this-&gt;pdo-&gt;query($sql)-&gt;fetchAll();
$metrics = [];
foreach ($result as $row) {
$metrics[$row['Variable_name']] = $row['Value'];
}
// Calculate buffer pool hit ratio
$reads = $metrics['Innodb_buffer_pool_reads'];
$requests = $metrics['Innodb_buffer_pool_read_requests'];
$metrics['buffer_pool_hit_ratio'] = (($requests - $reads) / $requests) * 100;
return $metrics;
}
public function getActiveConnections(): array {
$sql = "SELECT
id,
user,
host,
db,
command,
time,
state,
info
FROM information_schema.processlist
WHERE command != 'Sleep'
ORDER BY time DESC";
return $this-&gt;pdo-&gt;query($sql)-&gt;fetchAll();
}
public function getInnoDBStatus(): array {
$sql = "SHOW ENGINE INNODB STATUS";
$result = $this-&gt;pdo-&gt;query($sql)-&gt;fetch();
return $this-&gt;parseInnoDBStatus($result['Status']);
}
private function parseInnoDBStatus(string $status): array {
$metrics = [];
// Parse buffer pool info
if (preg_match('/Buffer pool sizes+(d+)/', $status, $matches)) {
$metrics['buffer_pool_size'] = $matches[1];
}
// Parse log sequence number
if (preg_match('/Log sequence numbers+(d+)/', $status, $matches)) {
$metrics['log_sequence_number'] = $matches[1];
}
// Parse pending reads/writes
if (preg_match('/Pending normal aio reads:s+(d+)/', $status, $matches)) {
$metrics['pending_reads'] = $matches[1];
}
return $metrics;
}
}</code></pre>
<h2>Partitioning Strategies</h2>
<h3>Range Partitioning</h3>
<pre><code class="language-sql">-- Partition by date for time-series data
CREATE TABLE order_history (
id INT AUTO_INCREMENT,
user_id INT,
total DECIMAL(10,2),
created_at TIMESTAMP,
PRIMARY KEY (id, created_at)
) PARTITION BY RANGE (YEAR(created_at)) (
PARTITION p2020 VALUES LESS THAN (2021),
PARTITION p2021 VALUES LESS THAN (2022),
PARTITION p2022 VALUES LESS THAN (2023),
PARTITION p2023 VALUES LESS THAN (2024),
PARTITION p2024 VALUES LESS THAN (2025),
PARTITION p_future VALUES LESS THAN MAXVALUE
);
-- Hash partitioning for load distribution
CREATE TABLE user_sessions (
id INT AUTO_INCREMENT,
user_id INT,
session_data TEXT,
created_at TIMESTAMP,
PRIMARY KEY (id, user_id)
) PARTITION BY HASH(user_id) PARTITIONS 8;</code></pre>
<h3>Partition Pruning</h3>
<pre><code class="language-sql">class PartitionManager {
private $pdo;
public function __construct(PDO $pdo) {
$this-&gt;pdo = $pdo;
}
public function addPartition(string $table, string $partition, string $value): void {
$sql = "ALTER TABLE {$table} ADD PARTITION (
PARTITION {$partition} VALUES LESS THAN ({$value})
)";
$this-&gt;pdo-&gt;exec($sql);
}
public function dropOldPartitions(string $table, int $keepDays = 90): void {
$cutoffDate = date('Y-m-d', strtotime("-{$keepDays} days"));
$sql = "SELECT
partition_name,
partition_description
FROM information_schema.partitions
WHERE table_name = ? AND partition_name IS NOT NULL
ORDER BY partition_ordinal_position";
$stmt = $this-&gt;pdo-&gt;prepare($sql);
$stmt-&gt;execute([$table]);
$partitions = $stmt-&gt;fetchAll();
foreach ($partitions as $partition) {
$partitionDate = $partition['partition_description'];
if ($partitionDate &lt; $cutoffDate) {
$this-&gt;dropPartition($table, $partition['partition_name']);
}
}
}
private function dropPartition(string $table, string $partition): void {
$sql = "ALTER TABLE {$table} DROP PARTITION {$partition}";
$this-&gt;pdo-&gt;exec($sql);
}
}</code></pre>
<h2>Advanced Optimization Techniques</h2>
<h3>Query Result Caching</h3>
<pre><code class="language-php">class QueryResultCache {
private $redis;
private $defaultTTL = 300;
public function __construct(Redis $redis) {
$this-&gt;redis = $redis;
}
public function getCachedQuery(string $sql, array $params = [], int $ttl = null): ?array {
$cacheKey = $this-&gt;generateCacheKey($sql, $params);
$cached = $this-&gt;redis-&gt;get($cacheKey);
if ($cached !== false) {
return json_decode($cached, true);
}
return null;
}
public function setCachedQuery(string $sql, array $params, array $result, int $ttl = null): void {
$cacheKey = $this-&gt;generateCacheKey($sql, $params);
$ttl = $ttl ?? $this-&gt;defaultTTL;
$this-&gt;redis-&gt;setex($cacheKey, $ttl, json_encode($result));
}
public function invalidateQueryCache(string $table): void {
$pattern = "query:*:{$table}:*";
$keys = $this-&gt;redis-&gt;keys($pattern);
if (!empty($keys)) {
$this-&gt;redis-&gt;del($keys);
}
}
private function generateCacheKey(string $sql, array $params): string {
$normalized = $this-&gt;normalizeQuery($sql);
$tables = $this-&gt;extractTables($normalized);
return 'query:' . md5($sql . serialize($params)) . ':' . implode(',', $tables);
}
private function normalizeQuery(string $sql): string {
// Remove extra whitespace and normalize case
return preg_replace('/s+/', ' ', strtolower(trim($sql)));
}
private function extractTables(string $sql): array {
preg_match_all('/(?:from|join|update|into)s+([a-zA-Z_]w*)/i', $sql, $matches);
return array_unique($matches[1]);
}
}</code></pre>
<h3>Database Sharding</h3>
<pre><code class="language-php">class DatabaseShardManager {
private $shards = [];
private $shardCount;
public function __construct(array $shardConfigs) {
$this-&gt;shardCount = count($shardConfigs);
foreach ($shardConfigs as $index =&gt; $config) {
$this-&gt;shards[$index] = new PDO(
$config['dsn'],
$config['username'],
$config['password'],
[PDO::ATTR_PERSISTENT =&gt; true]
);
}
}
public function getShardForUser(int $userId): PDO {
$shardIndex = $userId % $this-&gt;shardCount;
return $this-&gt;shards[$shardIndex];
}
public function executeOnAllShards(string $sql, array $params = []): array {
$results = [];
foreach ($this-&gt;shards as $index =&gt; $pdo) {
$stmt = $pdo-&gt;prepare($sql);
$stmt-&gt;execute($params);
$results[$index] = $stmt-&gt;fetchAll();
}
return $results;
}
public function executeOnShard(int $shardIndex, string $sql, array $params = []): array {
$pdo = $this-&gt;shards[$shardIndex];
$stmt = $pdo-&gt;prepare($sql);
$stmt-&gt;execute($params);
return $stmt-&gt;fetchAll();
}
}</code></pre>
<h2>Backup and Recovery Optimization</h2>
<h3>Hot Backup Strategy</h3>
<pre><code class="language-php">class HotBackupManager {
private $pdo;
private $backupPath;
public function __construct(PDO $pdo, string $backupPath) {
$this-&gt;pdo = $pdo;
$this-&gt;backupPath = $backupPath;
}
public function createIncrementalBackup(): void {
// Get current binary log position
$sql = "SHOW MASTER STATUS";
$status = $this-&gt;pdo-&gt;query($sql)-&gt;fetch();
$backupInfo = [
'timestamp' =&gt; date('Y-m-d H:i:s'),
'log_file' =&gt; $status['File'],
'log_position' =&gt; $status['Position'],
'type' =&gt; 'incremental'
];
// Create backup using xtrabackup
$command = sprintf(
'xtrabackup --backup --target-dir=%s --incremental-basedir=%s',
$this-&gt;backupPath . '/incremental_' . date('Y-m-d_H-i-s'),
$this-&gt;getLastFullBackup()
);
exec($command, $output, $returnCode);
if ($returnCode !== 0) {
throw new Exception('Backup failed: ' . implode("
", $output));
}
// Save backup metadata
file_put_contents(
$this-&gt;backupPath . '/backup_info.json',
json_encode($backupInfo)
);
}
public function createFullBackup(): void {
$backupDir = $this-&gt;backupPath . '/full_' . date('Y-m-d_H-i-s');
$command = sprintf(
'xtrabackup --backup --target-dir=%s',
$backupDir
);
exec($command, $output, $returnCode);
if ($returnCode !== 0) {
throw new Exception('Full backup failed: ' . implode("
", $output));
}
// Prepare the backup
$prepareCommand = sprintf('xtrabackup --prepare --target-dir=%s', $backupDir);
exec($prepareCommand);
}
private function getLastFullBackup(): string {
$backups = glob($this-&gt;backupPath . '/full_*');
if (empty($backups)) {
throw new Exception('No full backup found');
}
// Sort by modification time, get the latest
usort($backups, function($a, $b) {
return filemtime($b) - filemtime($a);
});
return $backups[0];
}
}</code></pre>
<h2>Common Performance Pitfalls</h2>
<ul>
<li><strong>Over-normalization:</strong> Sometimes denormalization improves performance</li>
<li><strong>Missing indexes:</strong> Every WHERE, JOIN, and ORDER BY clause should be indexed</li>
<li><strong>Too many indexes:</strong> Indexes slow down writes, find the right balance</li>
<li><strong>N+1 queries:</strong> Use JOINs or batch queries instead</li>
<li><strong>Large result sets:</strong> Use LIMIT and pagination</li>
<li><strong>Inefficient GROUP BY:</strong> Use covering indexes for grouped queries</li>
</ul>
<h2>Best Practices Summary</h2>
<ul>
<li><strong>Monitor first:</strong> Use slow query log and performance schema</li>
<li><strong>Index strategically:</strong> Focus on high-impact queries</li>
<li><strong>Optimize configuration:</strong> Tune MySQL settings for your workload</li>
<li><strong>Cache intelligently:</strong> Use query result caching for expensive queries</li>
<li><strong>Partition large tables:</strong> Improve query performance and maintenance</li>
<li><strong>Use prepared statements:</strong> Better performance and security</li>
<li><strong>Regular maintenance:</strong> Optimize tables and update statistics</li>
</ul>
<p>Database optimization is an ongoing process. Start with the biggest bottlenecks, measure the impact of changes, and continuously monitor performance. Remember that the best optimization strategy depends on your specific workload and data patterns.</p>
</section>
<footer class="article-footer">
<div class="article-nav">
<a href="/articles.html" class="back-link">← Back to Articles</a>
</div>
</footer>

  `
}) %>